| Commande                                  | R√©sultat attendu                             |
| ----------------------------------------- | -------------------------------------------- |
| `./spider -r http://site.com`             | recursive = true, depth = 5, path = "./data" |
| `./spider -r -l 3 http://site.com`        | recursive = true, depth = 3                  |
| `./spider -p /tmp/images http://site.com` | path = "/tmp/images"                         |
| `./spider -r -l 2 -p out http://site.com` | recursive = true, depth = 2, path = "out"    |

URL (via reqwest::get) ‚Üí r√©ponse HTTP ‚Üí bytes ‚Üí File::create() ‚Üí io::copy() ‚Üí fichier local

| T√¢che               | Crate recommand√©e           |
| ------------------- | --------------------------- |
| Requ√™te HTTP        | `reqwest` (avec `blocking`) |
| Analyse HTML        | `scraper`                   |
| Gestion d‚ÄôURL       | `url`                       |
| Syst√®me de fichiers | `std::fs`                   |

------------------------------------------------------------------------------------------
RUST notes:
------------------------------------------------------------------------------------------
Option<T> ‚Äî repr√©senter une valeur qui peut √™tre absente
Result<T, E> ‚Äî repr√©senter une op√©ration qui peut √©chouer
expect() ‚Äî d√©baller un Option ou Result en panicant si erreur

Alternatives √† expect()
| M√©thode                 | Comporte quoi ?                         |
| ----------------------- | --------------------------------------- |
| `.unwrap()`             | Comme `expect`, sans message            |
| `.unwrap_or(x)`         | Renvoie une valeur par d√©faut           |
| `.is_some()`            | Teste si une `Option` a une valeur      |
| `.map()`, `.and_then()` | Transforme le contenu si `Some` ou `Ok` |

Resume
| Type          | Utilit√©                                  | Exemple                      |
| ------------- | ---------------------------------------- | ---------------------------- |
| `Option<T>`   | Valeur pr√©sente ou non (`Some` / `None`) | `let val = opt.expect(...)`  |
| `Result<T,E>` | Succ√®s ou erreur (`Ok` / `Err`)          | `let val = res.expect(...)`  |
| `.expect()`   | Prend la valeur ou **panic** si absente  | `expect("message d'erreur")` |

Les 3 formes de self en Rust (ownership)
| Syntaxe dans l‚Äôimpl    | Type de `self`        | Comportement                                 |
| ---------------------- | --------------------- | -------------------------------------------- |
| `fn method(self)`      | **self est consomm√©** | L'objet est pris par **valeur** (ownership)  |
| `fn method(&self)`     | **emprunt immuable**  | L'objet est pr√™t√© (read-only)                |
| `fn method(&mut self)` | **emprunt mutable**   | L'objet est pr√™t√© avec droit de modification |

Consommer self = prendre la possession compl√®te de la valeur, et rendre inutilisable l'original apr√®s.

| Forme Rust             | Traduction logique                      |
| ---------------------- | --------------------------------------- |
| `if let Some(x) = opt` | S‚Äôil y a **une valeur**, l‚Äôextraire     |
| `if let Ok(x) = res`   | Si l‚Äôop√©ration a **r√©ussi**, l‚Äôextraire |
| `if let Err(e) = res`  | Si l‚Äôop√©ration a **√©chou√©**, l‚Äôattraper |

| Type          | Variante    | Signifie quoi ?                  | √Ä utiliser quand...                       | Exemple d‚Äôutilisation                |
| ------------- | ----------- | -------------------------------- | ----------------------------------------- | ------------------------------------ |
| `Option<T>`   | `Some(val)` | ‚úÖ Il y a une **valeur pr√©sente** | Une valeur **peut √™tre absente**          | `element.value().attr("src")`        |
| `Option<T>`   | `None`      | ‚ùå Il **n‚Äôy a pas** de valeur     |                                           | `None` si l‚Äôattribut n‚Äôexiste pas    |
| `Result<T,E>` | `Ok(val)`   | ‚úÖ L‚Äôop√©ration a **r√©ussi**       | Une op√©ration peut **r√©ussir ou √©chouer** | `Url::parse(...)`, `fichier.read()`  |
| `Result<T,E>` | `Err(err)`  | ‚ùå L‚Äôop√©ration a **√©chou√©**       |                                           | `Err("not a URL")`, `Err(io::Error)` |

| Mot-cl√© | V√©rifie quoi ?                           | Peut contenir quoi ?             | Typique de...        |
| ------- | ---------------------------------------- | -------------------------------- | -------------------- |
| `Some`  | Si une **valeur existe** (`Option`)      | La valeur disponible (`T`)       | Acc√®s √† une donn√©e   |
| `None`  | Si la valeur **manque** (`Option`)       | ‚Äî                                | Valeur absente       |
| `Ok`    | Si une **op√©ration a r√©ussi** (`Result`) | Le r√©sultat de l‚Äôop√©ration (`T`) | Op√©rations fallibles |
| `Err`   | Si une **op√©ration a √©chou√©** (`Result`) | L‚Äôerreur rencontr√©e (`E`)        | Gestion d‚Äôerreur     |

üì¶ reqwest ‚Üí pour faire une requ√™te HTTP GET

üì¶ std::fs::File ‚Üí pour cr√©er un fichier local

üì¶ std::io::copy ‚Üí pour √©crire les octets dans le fichier

‚úÖ Optionnel : Path ou Url::path_segments() ‚Üí pour obtenir un nom de fichier propre